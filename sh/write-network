#! /bin/sh
#
# Write the skeleton of the webpage for one network. 
#
# PARAMETERS
#	$network
#
# STDOUT
#	Content is written here
#
# INPUT FILES
#	dat-www/plots-network.$network
#	skeleton/networks/$network/statistics.html
#

set -e

#
# Collect information 
#

meta_name=$(field=name sh/read-meta)
format=$(sh/read-format)
weights=$(sh/read-weights)
url=$(field=url sh/read-meta)
entity_names=$(field=entity-names sh/read-meta)
relationship_names=$(field=relationship-names sh/read-meta)
extr=$(field=extr sh/read-meta)
timeiso=$(field=timeiso sh/read-meta)
cite=$(field=cite sh/read-meta)

if [ -e dat/check."$network" ] ; then
	if grep -q -F 1 dat/check."$network" ; then
		checkresult="Dataset passed all tests"
		checkimg='<IMG class="icon" src="${root}/ic/icon-check-success.png">'
	else
		checkresult="Dataset failed tests:  <CODE>$(head -1 dat/check_error."$network" | recode utf-8..html)</CODE>"
		checkimg='<IMG class="icon" src="${root}/ic/icon-check-failure.png">'
	fi
else
	checkresult="Check was not executed"
	checkimg='<IMG class="icon" src="${root}/ic/icon-unknown.png">'
fi

#
# Head
#

cat <<EOF
#nav:<A href="../../">KONECT</A> ‣ <A href="../">Networks</A> ‣
<H1>$meta_name</H1>
<P>
$(field=long-description sh/read-meta | fold -b -s)
</P>

<H2>Metadata</H2>
<TABLE>
EOF

#
# Identity
#

cat <<EOF
<TR><TD>Code            <TD class="padleft"><TD><CODE>$(field=code sh/read-meta)</CODE>
<TR><TD>Internal name   <TD><TD><CODE>$network</CODE>
<TR><TD>Name            <TD><TD>$meta_name
EOF
if [ "$url" ] ; then
	cat <<EOF
<TR><TD>Source          <TD><TD><A href="$url">$url</A>
EOF
fi
cat <<EOF
<TR><TD>Consistency check<TD class="padleft">$checkimg<TD>$checkresult
EOF

#
# Semantics
#

cat <<EOF
<TR><TD>Category        <TD><TD>$(field=category sh/read-meta)
EOF
if [ "$timeiso" ] ; then
	echo "<TR><TD>Dataset timestamp <TD><TD>$(printf '%s\n' "$timeiso" | sed -E -e 's,/, ⋯ ,')"
fi
if [ "$entity_names" ] ; then
	cat <<EOF
<TR><TD>Node meaning    <TD><TD>$entity_names
EOF
fi
if [ "$relationship_names" ] ; then
	cat <<EOF
<TR><TD>Edge meaning    <TD><TD>$relationship_names
EOF
fi
cat <<EOF
<TR><TD>Network format  <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-format-$format.png"><TD>$(format=$format sh/label-format)
<TR><TD>Edge type       <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-weights-$weights.png"><TD>$(weights=$weights sh/label-weights) 
EOF

if [ "$(head uni/out."$network" | tail -1 | wc -w)" -gt 3 ] ; then
	echo '<TR><TD>Temporal data <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-timestamps.png"><TD>Edges are annotated with timestamps'
fi
#
# Structure
#
if [ "$format" = asym ] ; then
	printf '%s' '<TR><TD>Reciprocal '
	if tag=nonreciprocal sh/has-tag ; then
		echo '<TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-nonreciprocal.png"><TD>Does not contain reciprocal edges'
	else
		echo '<TD class="padleft"><IMG class="icon" src="${root}/ic/icon-no.png"><TD>Contains reciprocal edges'
	fi
	printf '%s' '<TR><TD>Directed cycles'
	if tag=acyclic sh/has-tag ; then
		echo '<TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-acyclic.png"><TD>Does not contain directed cycles'
	else
		echo '<TD class="padleft"><IMG class="icon" src="${root}/ic/icon-no.png"><TD>Contains directed cycles'
	fi
fi
if [ "$format" != bip ] ; then
	printf '%s' '<TR><TD>Loops'
	if tag=loop sh/has-tag ; then
		echo '<TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-loop.png"><TD>Contains loops'
	else
		echo '<TD class="padleft"><IMG class="icon" src="${root}/ic/icon-no.png"><TD>Does not contain loops'
	fi
fi
if tag=tournament sh/has-tag ; then
	printf '%s\n' '<TR><TD>Tournament <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-tournament.png"><TD>The graph is a tournament:  all pairs of nodes are connected by a directed edge'
fi
if tag=trianglefree sh/has-tag ; then
	printf '%s\n' '<TR><TD>Triangles <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-trianglefree.png"><TD>Does not contain triangles'
fi
if tag=zeroweight sh/has-tag ; then
	printf '%s\n' '<TR><TD>Zero weights <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-zeroweight.png"><TD>Edges may have weight zero'
fi

#
# Extraction 
#
if tag=incomplete sh/has-tag ; then
	printf '%s\n' '<TR><TD>Completeness <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-incomplete.png"><TD>This network is incomplete'
fi
if tag=join sh/has-tag ; then
	printf '%s\n' '<TR><TD>Join <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-join.png"><TD>This network is the join of an underlying network'
fi
if tag=path sh/has-tag ; then
	printf '%s\n' '<TR><TD>Path <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-path.png"><TD>The edges in this network form paths'
fi
if tag=missingorientation sh/has-tag ; then
	printf '%s\n' '<TR><TD>Orientation <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-missingorientation.png"><TD>The network is not directed, but the underlying data is'
fi
if tag=missingmultiplicity sh/has-tag ; then
	printf '%s\n' '<TR><TD>Multiplicity <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-missingmultiplicity.png"><TD>The network does not have multiple edges, but the underlying data has'
fi
if tag=kcore sh/has-tag ; then
	printf '%s\n' '<TR><TD><I>k</I>-core <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-kcore.png"><TD>Only nodes with degree &gt;&nbsp;<I>k</I> are included'
fi
if tag=lcc sh/has-tag ; then
	printf '%s\n' '<TR><TD>Largest connected component <TD class="padleft"><IMG class="icon" src="${root}/ic/icon-tag-lcc.png"><TD>Only the largest connected component of the original data is included'
fi

cat <<EOF
</TABLE>

<H2>Statistics</H2>
EOF

cat skeleton/networks/"$network"/statistics.html

cat <<EOF
<H2>Plots</H2>
EOF

for file in $(cat dat-www/plots-network."$network")
do
	echo "<A href=\"../../plot/$file.full.png\"><IMG SRC=\"../../plot/$file.small.png\"></A>"
done

if grep -q -E '^\s*'"$network"'\s*,\s*matrix\s*$' dat/allowed_src.txt ; then
	cat <<EOF

<H2>Downloads</H2>
<UL>
  <LI><A href="../../files/download.tsv.$network.tar.bz2">Data as TSV</A> ($(stat -c%s dat/download.tsv.$network.tar.bz2 | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta') bytes)
EOF
if [ "$extr" ] ; then
	echo "<LI><A href=\"https://github.com/kunegis/konect-extr/tree/master/extr/$extr\">Extraction code</A> (GitHub)"
fi
cat <<EOF
</UL>
EOF
fi

if [ "$cite" ] ; then
	tmpfile=$(mktemp)
	printf '%s\n' "$cite" | sed -E -e 's|,|\
|g' >"$tmpfile"
	echo
	echo '<H2>References</H2>'
	dir=$(pwd)
	cd "$(dirname "$tmpfile")"
	bibtex2html -q --citefile "$(basename "$tmpfile")" --nodoc --nobibsource -o - --no-header -w  "$dir"/konect-extr/konect.bib |
		sed -E -e 's,<hr>.*$,,;tx;by;:x;q;:y' |
		sed -E -e 's,--,–,g'
	rm -f -- "$tmpfile" 
fi
