* statistic:  median degree  [mediandegree]
* new statistic:  maximal egde multiplicity 
* for rating networks:  mean rating, i.e., mean edge weight
* statistic: [prefatt] pref. att. exponent
* Second largest eigenvalue of N:  spectral gap, as per Martin Gueuning 
* new node statistic:  k-core number (largest k for which a node has
  degree >0 in the k-core). (as measure of centrality).  Plot the
  corresponding distribution, the k-core distribution. 
  (matlab_bgl function core_numbers.m)
* The spectral radius divided by the spectral norm (a measure of the [a]cyclic-ness)
* norm. alg. conflict; norm. alg. connectivity; norm. alg. non-bipartivity (related to [nonbipn])
* Ratios:   maxdiag/opnorm, maxdiag/snorm:  they are measures of the "cyclicness" of a directed graph 
* plots:  show sample plot for each plot type (extract them from the Handbook or somewhere else)
* for each statistic:  scatter plots of that statistic vs size (show the "largest" available plot) (also, add to konect-analysis/@www)
* for each statistic:  distribution and cumulative distribution plot for that statistic (also, add to konect-analysis/@www)
* metadata:  add a line stating whether the network is connected or not 
* Have a page about matrix decompositions (/decompositions/)
* Have a page for selected families of networks (/families/)
* check programmatically that the 'name' of networks is unique over all networks
* in the metadata section of weighted networks:  show a line summarizing the possible weights 
* for certain statistics and plots, have references, in particular to our own
* statistics:  for each statistic, show using icons to which types of networks it applies 
* plot:  show network name, and have a link to the network (don't know how to make this beautiful)
* main page:  show three example graphs for each group:  3 statistics, 3 plots, 3 networks, etc. 
* network:  for each statistic, show the percentile of the network for that statistic
* networks/ table and other tables:  make it sortable (needs Javascript :/)
* left and right size of [coco]
** have to actually generate it ...
** Need to write a new C program size.c that is *not* only called for
   the simple~* variant, but for the actual graph.  Or better, write a
   lcc.c program, that does it directly 
* temporal histogram:  also plot in modulo YEAR, WEEK and DAY. 
* new plot type:  all standard statistics in function of time (we have
to exclude statistics that are themselves based on temporal features) 
* mediandist:  actually compute it from hyperanf
* hopdistr.b:  Y axis labels:  write there the logit-transformed values.
* laplacian of signed graph WITHOUT absolute value.  Models real
repulsion, better than the absolute value, which models antipodal
attraction.  This is used in [357] to draw signed graphs. 
** decomposition: L= D-A without absolute value
** Is there always an eigenvalue zero with constant eigenvector?
** Eigenvalues may be negative even if every node has positive
sum-of-weights. 
** This is NOT the same as LAPQ (there is no implementation yet) 
* statistic:  median path length:  compute is properly (as the rounded-up 50-percentile effective diameter) 
* implement in C or as function of other statistics:  fill, average degree, inoutassort, etc. 
* normalized version of the algebraic conflict:  derive as a problem of
assigning a number to each node such that the number is equal/opposite
when two nodes are connected, and the algebraic conflict equals the sum
of squared differences.  Normalize by the number of edges, and such that
the mean square of numbers is one.
\xi' = \xi * n / 2m = \xi / d
(the exact definition is in projects/konect/presentations/komepol.opd)
* scatter over all nodes of one network:  degree vs number of adjacent
triangles.  There should be a power-law slope of a round 1.5, according
to [Fast Counting of Triangles in Large Real Networks:
Algorithms and Laws] p.8, fig 7.
* size distribution of connected components (directed and undirected)
* implement all repulsive matrices 
* statistic:  revive [aredis]
* statistic:  on each statistic page, insert a phrase describing to which group of networks the statistic applies 

== Public announcements ==
* @network.dimacs10-(netscience polblogs polbooks cnr-2000 eu-2005 in-2004 uk-2002 chesapeake celegans_metabolic)
* @network.komarix-citeseer
